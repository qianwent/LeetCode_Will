package com.leetcode.hashtable.easy;

import java.util.HashMap;
import java.util.Map;

/**
 * Given two strings s and t which consist of only lowercase letters.

 String t is generated by random shuffling string s and then add one more letter at a random position.

 Find the letter that was added in t.

 Example:

 Input:
 s = "abcd"
 t = "abcde"

 Output:
 e

 Explanation:
 'e' is the letter that was added.
 */
public class FindTheDifference {

    //在熟悉了map的一些特性之后，自然而然就会想到一下方法，不过看起来总觉得有点臃肿，毕竟有3个for循环
    public char findTheDifference(String s, String t) {

        char diffC = 'a';
        Map<Character, Integer> map = new HashMap<>();
        for(char c1: t.toCharArray()) {
            map.put(c1, map.getOrDefault(c1, 0) + 1);
        }
        for(char c2: s.toCharArray()) {
            map.put(c2, map.get(c2)-1);
        }
        for(char c: map.keySet()) {
            if(map.get(c)==1) diffC = c;
        }
        return diffC;
    }

    //这种方法，看着像是数学题当中的取巧方法，运用了2个字符串每个字符转换成对于的ASCII码后各自加和然后相减得到的值便是多出的字符
    //算法中很多这种取巧的方法都是积累出来的，需要多刷题，才会有感觉
    public char findTheDifference_array(String s, String t) {
        int charCodeT = 0;
        int charCodeS = 0;
        for(int i=0; i<t.length(); i++) {
            charCodeT += (int)t.charAt(i);
        }
        for(int i=0; i<s.length(); i++) {
            charCodeS += (int)s.charAt(i);
        }
        return (char)(charCodeT - charCodeS);
    }

}
