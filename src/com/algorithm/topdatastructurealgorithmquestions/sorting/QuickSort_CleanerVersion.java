package com.algorithm.topdatastructurealgorithmquestions.sorting;

/**
 * Created by Wentao Qian on 12/4/2017.
 * original website: https://www.cnblogs.com/MOBIN/p/4681369.html
 */
public class QuickSort_CleanerVersion {
    public static void quickSort(int arr[],int _left,int _right){
        int left = _left;//注意这里左右指针都保存起来了，因为递归的时候还要用到
        int right = _right;
        int temp = 0;
        if(left <= right){   //待排序的元素至少有两个的情况
            temp = arr[left];  //待排序的第一个元素作为基准元素
            while(left != right){   //从左右两边交替扫描，直到left = right

                while(right > left && arr[right] >= temp)
                    right --;        //从右往左扫描，找到第一个比基准元素小的元素
                arr[left] = arr[right];  //找到这种元素arr[right]后与arr[left]交换

                while(left < right && arr[left] <= temp)
                    left ++;         //从左往右扫描，找到第一个比基准元素大的元素
                arr[right] = arr[left];  //找到这种元素arr[left]后，与arr[right]交换

            }
            arr[right] = temp;    //基准元素归位 //TODO:目前分析看来，到这一步，right==left
            //TODO：依然是极限情况，如果已经是排好序的，那右指针会一直递减直到==0，这个需要多记忆一下
            //根据归纳法，可以得出结论，最终right==left
            quickSort(arr,_left,left-1);  //对基准元素左边的元素进行递归排序
            quickSort(arr, right+1,_right);  //对基准元素右边的进行递归排序
        }
    }
    public static void main(String[] args) {
        int array[] = {10,5,3,1,4,7,2,8};
        System.out.println("排序之前：");
        for(int element : array){
            System.out.print(element+" ");
        }

        quickSort(array,0,array.length-1);

        System.out.println("\n排序之后：");
        for(int element : array){
            System.out.print(element+" ");
        }

        System.out.println();

        int arr[] = {1,2,3};
        quickSort(arr, 0, arr.length-1);
        for(int i: arr) {
            System.out.print(i + " ");
        }

    }
}
